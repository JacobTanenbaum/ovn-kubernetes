name: ovn-ci

on:
  push:
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 */12 * * *'

env:
  GO_VERSION: "1.16.3"
  K8S_VERSION: v1.20.2
  KIND_CLUSTER_NAME: ovn
  KIND_INSTALL_INGRESS: true
  KIND_ALLOW_SYSTEM_WRITES: true
  # This skips tests tagged as Serial
  # Current Serial tests are not relevant for OVN
  PARALLEL: true

jobs:
  # separate job for parallelism
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Verify
      uses: golangci/golangci-lint-action@v2
      with:
        version: v1.33.2
        working-directory: go-controller
        args: --modules-download-mode=vendor --timeout=15m0s --verbose

  build-master:
    name: Build-master
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
      id: go

    - name: Check out code into the Go module directory - from master branch
      uses: actions/checkout@v2
      with:
        ref: master

    - name: Build - from master branch
      run: |
        set -x
        pushd go-controller
           make
           make windows
        popd

    - name: Build docker image - from master branch
      run: |
        pushd dist/images
          sudo cp -f ../../go-controller/_output/go/bin/ovn* .
          echo "ref: $(git rev-parse  --symbolic-full-name HEAD)  commit: $(git rev-parse  HEAD)" > git_info
          docker build -t ovn-daemonset-f:dev -f Dockerfile.fedora .
          mkdir _output
          docker save ovn-daemonset-f:dev > _output/image-master.tar
        popd

    - uses: actions/upload-artifact@v2
      with:
        name: test-image-master
        path: dist/images/_output/image-master.tar

  build-pr:
    name: Build-PR
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
      id: go

    - name: Check out code into the Go module directory - from current pr branch
      uses: actions/checkout@v2

    - name: Build and Test - from current pr branch
      run: |
        set -x
        pushd go-controller
           # exit early if there are gofmt issues
           make gofmt
           make
           make windows
           COVERALLS=1 CONTAINER_RUNNABLE=1 make check
        popd

    - name: Build docker image - from current pr branch
      run: |
        pushd dist/images
          sudo cp -f ../../go-controller/_output/go/bin/ovn* .
          echo "ref: $(git rev-parse  --symbolic-full-name HEAD)  commit: $(git rev-parse  HEAD)" > git_info
          docker build -t ovn-daemonset-f:pr -f Dockerfile.fedora .
          mkdir _output
          docker save ovn-daemonset-f:pr > _output/image-pr.tar
        popd

    - uses: actions/upload-artifact@v2
      with:
        name: test-image-pr
        path: dist/images/_output/image-pr.tar

    - name: Upload Junit Reports
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: junit-unit
        path: '**/_artifacts/**.xml'

    - name: Submit code coverage to Coveralls
      env:
        COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GO111MODULE: off
      run: |
        set -x
        go get github.com/mattn/goveralls
        go get github.com/modocache/gover
        PATH=$PATH:$(go env GOPATH)/bin

        mkdir -p $(go env GOPATH)/src/github.com/ovn-org
        ln -sf $(pwd) $(go env GOPATH)/src/github.com/ovn-org/ovn-kubernetes

        gover
        goveralls -coverprofile=gover.coverprofile -service=github
